version: "3"

vars:
  IMAGE_NAME: '{{.IMAGE_NAME | default "my-devcontainer"}}'
  CONTAINER_NAME: '{{.CONTAINER_NAME | default "devcontainer"}}'
  DOCKERFILE: '{{.DOCKERFILE | default ".devcontainer/Dockerfile"}}'

  # Where your repo is mounted inside the container
  WORKDIR: '{{.WORKDIR | default "/workspaces/project"}}'

  # Bind SSH only to cluster loopback; you'll tunnel into it
  SSH_BIND_HOST: '{{.SSH_BIND_HOST | default "127.0.0.1"}}'
  SSH_PORT: '{{.SSH_PORT | default "2222"}}' # cluster-side mapped port
  LOCAL_TUNNEL_PORT: '{{.LOCAL_TUNNEL_PORT | default "8022"}}' # laptop-side port

  # Container user mirrors cluster user to keep file perms clean
  USERNAME: '{{.USERNAME | default "devuser" }}'
  UID: '{{.UID | default "1000" }}'
  GID: '{{.GID | default "1000" }}'

  # Grab SSH pubkey if present
  SSH_PUBKEY: '{{.SSH_PUBKEY | default ""}}'

tasks:
  build:
    desc: Build the devcontainer image (with SSH baked in)
    cmds:
      - test -f "{{.DOCKERFILE}}" || (echo "Missing {{.DOCKERFILE}}" && exit 1)
      - >
        docker build -t {{.IMAGE_NAME}}
        --build-arg USER_NAME={{.USERNAME}}
        --build-arg USER_UID={{.UID}}
        --build-arg USER_GID={{.GID}}
        -f {{.DOCKERFILE}} .

  up:
    desc: Run container on the cluster; expose SSH on 127.0.0.1:{{.SSH_PORT}}
    deps: [build]
    cmds:
      - |
        if docker ps -a --format '{{`{{.Names}}`}}' | grep -qx "{{.CONTAINER_NAME}}"; then
          echo "Container {{.CONTAINER_NAME}} already exists. Startingâ€¦"
          docker start {{.CONTAINER_NAME}}
        else
          docker run -d \
            --name {{.CONTAINER_NAME}} \
            -p {{.SSH_BIND_HOST}}:{{.SSH_PORT}}:22 \
            -v "$PWD:{{.WORKDIR}}" \
            -e DEVUSER={{.USERNAME}} \
            -e DEVUID={{.UID}} \
            -e DEVGID={{.GID}} \
            -e SSH_PUBKEY="{{.SSH_PUBKEY}}" \
            -w "{{.WORKDIR}}" \
            {{.IMAGE_NAME}}
        fi
      - |
        echo
        echo "=== From your laptop, create the SSH tunnel ==="
        echo "ssh -N -L {{.LOCAL_TUNNEL_PORT}}:127.0.0.1:{{.SSH_PORT}} <cluster_user>@<cluster_host>"
        echo
        echo "Then connect your IDE/SSH client to:"
        echo "  Host: localhost"
        echo "  Port: {{.LOCAL_TUNNEL_PORT}}"
        echo "  User: {{.USERNAME}}"
        echo
        if [ -z "{{.SSH_PUBKEY}}" ]; then
          echo "NOTE: SSH_PUBKEY is empty. Either:"
          echo "  - set SSH_PUBKEY=\"\$(cat ~/.ssh/id_ed25519.pub)\" when running 'task up', or"
          echo "  - mount a file at /ssh/authorized_keys in docker run (adapt the Taskfile if you prefer)."
          echo
        fi

  attach:
    desc: Exec into the container (on the cluster)
    cmds:
      - docker exec -it {{.CONTAINER_NAME}} bash || docker exec -it {{.CONTAINER_NAME}} sh

  down:
    desc: Stop & remove the container
    cmds:
      - docker rm -f {{.CONTAINER_NAME}} 2>/dev/null || true
